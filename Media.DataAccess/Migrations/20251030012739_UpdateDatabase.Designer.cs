// <auto-generated />
using System;
using Meida.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Media.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251030012739_UpdateDatabase")]
    partial class UpdateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Media.Models.ChamSocKhachHang", b =>
                {
                    b.Property<int>("MaChamSoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaChamSoc"));

                    b.Property<int?>("MaNhanVienChamSoc")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NgayChamSoc")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoiDung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaChamSoc");

                    b.HasIndex("MaNhanVienChamSoc");

                    b.ToTable("ChamSocKhachHang");
                });

            modelBuilder.Entity("Media.Models.ChiTietDonHang", b =>
                {
                    b.Property<int>("MaChiTietDonHang")
                        .HasColumnType("int");

                    b.Property<int>("MaSach")
                        .HasColumnType("int");

                    b.Property<decimal>("DonGia")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaDonHang")
                        .HasColumnType("int");

                    b.Property<int>("SoLuong")
                        .HasColumnType("int");

                    b.HasKey("MaChiTietDonHang", "MaSach");

                    b.HasIndex("MaDonHang");

                    b.HasIndex("MaSach");

                    b.ToTable("ChiTietDonHangs");
                });

            modelBuilder.Entity("Media.Models.ChiTietKiemKe", b =>
                {
                    b.Property<int>("MaChiTietKiemKe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaChiTietKiemKe"));

                    b.Property<int>("MaKiemKeSanPham")
                        .HasColumnType("int");

                    b.Property<int>("MaSach")
                        .HasColumnType("int");

                    b.Property<int>("SoLuongThucTe")
                        .HasColumnType("int");

                    b.HasKey("MaChiTietKiemKe");

                    b.HasIndex("MaKiemKeSanPham");

                    b.HasIndex("MaSach");

                    b.ToTable("ChiTietKiemKe");
                });

            modelBuilder.Entity("Media.Models.ChuDe", b =>
                {
                    b.Property<int>("MaChuDe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaChuDe"));

                    b.Property<int?>("ChuDeMaChuDe")
                        .HasColumnType("int");

                    b.Property<string>("DuongDanURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("TenChuDe")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("MaChuDe");

                    b.HasIndex("ChuDeMaChuDe");

                    b.ToTable("ChuDes");
                });

            modelBuilder.Entity("Media.Models.DonHang", b =>
                {
                    b.Property<int>("MaDonHang")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaDonHang"));

                    b.Property<bool>("DaThanhToan")
                        .HasColumnType("bit");

                    b.Property<int>("MaKhachHang")
                        .HasColumnType("int");

                    b.Property<int>("MaNhanVien")
                        .HasColumnType("int");

                    b.Property<DateTime>("NgayDat")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayGiao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgayGuiHangVanChuyen")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgayTaoDonVanChuyen")
                        .HasColumnType("datetime2");

                    b.Property<int>("TinhTrangGiaoHang")
                        .HasColumnType("int");

                    b.HasKey("MaDonHang");

                    b.HasIndex("MaKhachHang");

                    b.HasIndex("MaNhanVien");

                    b.ToTable("DonHangs");
                });

            modelBuilder.Entity("Media.Models.HoaDon", b =>
                {
                    b.Property<int>("MaHoaDon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaHoaDon"));

                    b.Property<int>("MaDonHang")
                        .HasColumnType("int");

                    b.Property<int?>("MaKeToan")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NgayXuat")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("TongTien")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MaHoaDon");

                    b.HasIndex("MaDonHang")
                        .IsUnique();

                    b.HasIndex("MaKeToan");

                    b.ToTable("HoaDons");
                });

            modelBuilder.Entity("Media.Models.KhachHang", b =>
                {
                    b.Property<int>("MaKhachHang")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaKhachHang"));

                    b.Property<string>("DiaChi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HoTen")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MaTaiKhoan")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("NgaySinh")
                        .HasColumnType("datetime2");

                    b.HasKey("MaKhachHang");

                    b.HasIndex("MaTaiKhoan")
                        .IsUnique();

                    b.ToTable("KhachHangs");
                });

            modelBuilder.Entity("Media.Models.KiemKeSanPham", b =>
                {
                    b.Property<int>("MaKiemKe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaKiemKe"));

                    b.Property<string>("GhiChu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaNhanVienKiemKe")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NgayKiemKe")
                        .HasColumnType("datetime2");

                    b.HasKey("MaKiemKe");

                    b.HasIndex("MaNhanVienKiemKe");

                    b.ToTable("KiemKeSanPhams");
                });

            modelBuilder.Entity("Media.Models.NhaXuatBan", b =>
                {
                    b.Property<int>("MaNhanXuatBan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaNhanXuatBan"));

                    b.Property<string>("TenNXB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaNhanXuatBan");

                    b.ToTable("NhaXuatBans");
                });

            modelBuilder.Entity("Media.Models.NhanVien", b =>
                {
                    b.Property<int>("MaNhanVien")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaNhanVien"));

                    b.Property<int?>("BacLuong")
                        .HasColumnType("int");

                    b.Property<string>("CCCD")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("DiaChi")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("HoTen")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LoaiNhanVien")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<decimal?>("Luong")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MaTaiKhoan")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("NgaySinh")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgayVaoLam")
                        .HasColumnType("datetime2");

                    b.Property<string>("QueQuan")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("MaNhanVien");

                    b.HasIndex("MaTaiKhoan")
                        .IsUnique();

                    b.ToTable("NhanViens");

                    b.HasDiscriminator<string>("LoaiNhanVien").HasValue("NhanVien");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Media.Models.PhanHoiKhachHang", b =>
                {
                    b.Property<int>("MaPhanHoiKhachHang")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaPhanHoiKhachHang"));

                    b.Property<string>("LoaiPhanHoi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MaKhachHang")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NgayPhanHoi")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoiDung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaPhanHoiKhachHang");

                    b.HasIndex("MaKhachHang");

                    b.ToTable("PhanHoiTuKhachHangs");
                });

            modelBuilder.Entity("Media.Models.PhieuNhapKho", b =>
                {
                    b.Property<int>("MaPhieuNhapKho")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaPhieuNhapKho"));

                    b.Property<string>("GhiChu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaNhanVienNhapKho")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NgayTao")
                        .HasColumnType("datetime2");

                    b.HasKey("MaPhieuNhapKho");

                    b.HasIndex("MaNhanVienNhapKho");

                    b.ToTable("PhieuNhapKho");
                });

            modelBuilder.Entity("Media.Models.PhieuNhapKhoChiTiet", b =>
                {
                    b.Property<int>("MaPhieuNhapKho")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("MaSach")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<decimal?>("DonGia")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SoLuong")
                        .HasColumnType("int");

                    b.HasKey("MaPhieuNhapKho", "MaSach");

                    b.HasIndex("MaSach");

                    b.ToTable("PhieuNhapKhoChiTiets");
                });

            modelBuilder.Entity("Media.Models.Sach", b =>
                {
                    b.Property<int>("MaSach")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaSach"));

                    b.Property<double>("GiaBan")
                        .HasColumnType("float");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaChuDe")
                        .HasColumnType("int");

                    b.Property<int>("MaNhaXuatBan")
                        .HasColumnType("int");

                    b.Property<int>("MaTacGia")
                        .HasColumnType("int");

                    b.Property<string>("MoTa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NgayCapNhap")
                        .HasColumnType("datetime2");

                    b.Property<int>("SoLuong")
                        .HasColumnType("int");

                    b.Property<string>("TenSach")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaSach");

                    b.HasIndex("MaChuDe");

                    b.HasIndex("MaNhaXuatBan");

                    b.HasIndex("MaTacGia");

                    b.ToTable("Saches");
                });

            modelBuilder.Entity("Media.Models.TacGia", b =>
                {
                    b.Property<int>("MaTacGia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaTacGia"));

                    b.Property<string>("TenTG")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaTacGia");

                    b.ToTable("TacGias");
                });

            modelBuilder.Entity("Media.Models.TaiKhoan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Media.Models.HauCan", b =>
                {
                    b.HasBaseType("Media.Models.NhanVien");

                    b.HasDiscriminator().HasValue("HauCan");
                });

            modelBuilder.Entity("Media.Models.KeToan", b =>
                {
                    b.HasBaseType("Media.Models.NhanVien");

                    b.Property<string>("BoPhanPhuTrach")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("KeToan");
                });

            modelBuilder.Entity("Media.Models.QuanLy", b =>
                {
                    b.HasBaseType("Media.Models.NhanVien");

                    b.Property<string>("CapBac")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("QuanLy");
                });

            modelBuilder.Entity("Media.Models.ChamSocKhachHang", b =>
                {
                    b.HasOne("Media.Models.NhanVien", "NhanVienChamSoc")
                        .WithMany("ChamSocKhachHangs")
                        .HasForeignKey("MaNhanVienChamSoc");

                    b.Navigation("NhanVienChamSoc");
                });

            modelBuilder.Entity("Media.Models.ChiTietDonHang", b =>
                {
                    b.HasOne("Media.Models.DonHang", "DonHang")
                        .WithMany("ChiTietDonHangs")
                        .HasForeignKey("MaDonHang")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Media.Models.Sach", "Sach")
                        .WithMany("ChiTietDonHangs")
                        .HasForeignKey("MaSach")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DonHang");

                    b.Navigation("Sach");
                });

            modelBuilder.Entity("Media.Models.ChiTietKiemKe", b =>
                {
                    b.HasOne("Media.Models.KiemKeSanPham", "KiemKeSanPham")
                        .WithMany("ChiTietKiemKes")
                        .HasForeignKey("MaKiemKeSanPham")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Media.Models.Sach", "Sach")
                        .WithMany("ChiTietKiemKes")
                        .HasForeignKey("MaSach")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KiemKeSanPham");

                    b.Navigation("Sach");
                });

            modelBuilder.Entity("Media.Models.ChuDe", b =>
                {
                    b.HasOne("Media.Models.ChuDe", null)
                        .WithMany("Children")
                        .HasForeignKey("ChuDeMaChuDe");
                });

            modelBuilder.Entity("Media.Models.DonHang", b =>
                {
                    b.HasOne("Media.Models.KhachHang", "KhachHang")
                        .WithMany("DonHangs")
                        .HasForeignKey("MaKhachHang")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Media.Models.NhanVien", "NhanVien")
                        .WithMany("DonHangs")
                        .HasForeignKey("MaNhanVien")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("KhachHang");

                    b.Navigation("NhanVien");
                });

            modelBuilder.Entity("Media.Models.HoaDon", b =>
                {
                    b.HasOne("Media.Models.DonHang", "DonHang")
                        .WithOne("HoaDon")
                        .HasForeignKey("Media.Models.HoaDon", "MaDonHang")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Media.Models.NhanVien", "KeToan")
                        .WithMany()
                        .HasForeignKey("MaKeToan");

                    b.Navigation("DonHang");

                    b.Navigation("KeToan");
                });

            modelBuilder.Entity("Media.Models.KhachHang", b =>
                {
                    b.HasOne("Media.Models.TaiKhoan", "TaiKhoan")
                        .WithOne("KhachHang")
                        .HasForeignKey("Media.Models.KhachHang", "MaTaiKhoan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaiKhoan");
                });

            modelBuilder.Entity("Media.Models.KiemKeSanPham", b =>
                {
                    b.HasOne("Media.Models.NhanVien", "NhanVienKiemKe")
                        .WithMany("KiemKeSanPhams")
                        .HasForeignKey("MaNhanVienKiemKe");

                    b.Navigation("NhanVienKiemKe");
                });

            modelBuilder.Entity("Media.Models.NhanVien", b =>
                {
                    b.HasOne("Media.Models.TaiKhoan", "TaiKhoan")
                        .WithOne("NhanVien")
                        .HasForeignKey("Media.Models.NhanVien", "MaTaiKhoan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaiKhoan");
                });

            modelBuilder.Entity("Media.Models.PhanHoiKhachHang", b =>
                {
                    b.HasOne("Media.Models.KhachHang", "KhachHang")
                        .WithMany("PhanHoiKhachHangs")
                        .HasForeignKey("MaKhachHang")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KhachHang");
                });

            modelBuilder.Entity("Media.Models.PhieuNhapKho", b =>
                {
                    b.HasOne("Media.Models.NhanVien", "NhanVienNhapKho")
                        .WithMany("PhieuNhapKhos")
                        .HasForeignKey("MaNhanVienNhapKho");

                    b.Navigation("NhanVienNhapKho");
                });

            modelBuilder.Entity("Media.Models.PhieuNhapKhoChiTiet", b =>
                {
                    b.HasOne("Media.Models.PhieuNhapKho", "PhieuNhapKho")
                        .WithMany("PhieuNhapKhoChiTiets")
                        .HasForeignKey("MaPhieuNhapKho")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Media.Models.Sach", "Sach")
                        .WithMany("PhieuNhapKhoChiTiets")
                        .HasForeignKey("MaSach")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhieuNhapKho");

                    b.Navigation("Sach");
                });

            modelBuilder.Entity("Media.Models.Sach", b =>
                {
                    b.HasOne("Media.Models.ChuDe", "ChuDe")
                        .WithMany()
                        .HasForeignKey("MaChuDe")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Media.Models.NhaXuatBan", "NhaXuatBan")
                        .WithMany()
                        .HasForeignKey("MaNhaXuatBan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Media.Models.TacGia", "TacGia")
                        .WithMany()
                        .HasForeignKey("MaTacGia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChuDe");

                    b.Navigation("NhaXuatBan");

                    b.Navigation("TacGia");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Media.Models.TaiKhoan", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Media.Models.TaiKhoan", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Media.Models.TaiKhoan", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Media.Models.TaiKhoan", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Media.Models.ChuDe", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Media.Models.DonHang", b =>
                {
                    b.Navigation("ChiTietDonHangs");

                    b.Navigation("HoaDon")
                        .IsRequired();
                });

            modelBuilder.Entity("Media.Models.KhachHang", b =>
                {
                    b.Navigation("DonHangs");

                    b.Navigation("PhanHoiKhachHangs");
                });

            modelBuilder.Entity("Media.Models.KiemKeSanPham", b =>
                {
                    b.Navigation("ChiTietKiemKes");
                });

            modelBuilder.Entity("Media.Models.NhanVien", b =>
                {
                    b.Navigation("ChamSocKhachHangs");

                    b.Navigation("DonHangs");

                    b.Navigation("KiemKeSanPhams");

                    b.Navigation("PhieuNhapKhos");
                });

            modelBuilder.Entity("Media.Models.PhieuNhapKho", b =>
                {
                    b.Navigation("PhieuNhapKhoChiTiets");
                });

            modelBuilder.Entity("Media.Models.Sach", b =>
                {
                    b.Navigation("ChiTietDonHangs");

                    b.Navigation("ChiTietKiemKes");

                    b.Navigation("PhieuNhapKhoChiTiets");
                });

            modelBuilder.Entity("Media.Models.TaiKhoan", b =>
                {
                    b.Navigation("KhachHang")
                        .IsRequired();

                    b.Navigation("NhanVien")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
